-- Screen Animation Plugin
-- by Ho
-- April 2023

-- Information block for the plugin
PluginInfo = {
  Name = "UCI~Sreen Animation Draw with EzSVG",
  Version = "1.0",
  BuildVersion = "1.0.0.0",
  Id = "42198dc8-5c28-44ce-bbc9-c0c53f77ecdf",
  Author = "Ho",
  Description = "Sreen Animation Draw with EzSVG plugin"
}

-- Define the color of the plugin object in the design
function GetColor(props)
  return { 102, 102, 102 }
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return "Sreen Animation Draw with EzSVG, version " .. PluginInfo.Version
end

-- Optional function used if plugin has multiple pages
PageNames = { "Control" }  --List the pages within the plugin
function GetPages(props)
  local pages = {}
  for ix,name in ipairs(PageNames) do
    table.insert(pages, {name = PageNames[ix]})
  end
  return pages
end

-- Optional function to define model if plugin supports more than one model
function GetModel(props)
  local model = {}
  if props.Model ~= nil and props.Model.Value ~= "" then
    table.insert(model, { props.Model.Value } )
  else
    table.insert(model, { "Base Model" } )
  end
 return model
end

-- Define User configurable Properties of the plugin
function GetProperties()
  local props = {}
  table.insert(props, {
    Name = "Debug Print",
    Type = "enum",
    Choices = {"None", "Tx/Rx", "Tx", "Rx", "Function Calls", "All"},
    Value = "None"
  })
  return props
end

-- Optional function to define pins on the plugin that are not connected to a Control
function GetPins(props)
  local pins = {}
  --
  return pins
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
  if props.plugin_show_debug.Value == false then
    props["Debug Print"].IsHidden = true
  end
  return props
end

-- Optional function to define components used within the plugin
function GetComponents(props)
  local components = {}
  --
  return components
end

-- Optional function to define wiring of components used within the plugin
function GetWiring(props)
  local wiring = {}
  --
  return wiring
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local ctrls = {}
  table.insert(ctrls, {
    Name = "Image",
    ControlType = "Button",
    ButtonType = "Toggle",
    PinStyle = "Both",
    Count = 1,
    UserPin = true
  })
  table.insert(ctrls, {
    Name = "Duration",
    ControlType = "Knob",
    ControlUnit = "Float",
    Min = 1,
    Max = 30,
    DefaultValue = 6,
    PinStyle = "Both",
    Count = 1,
    UserPin = true
  })
  table.insert(ctrls, {
    Name = "Mask",
    ControlType = "Button",
    ButtonType = "Toggle",
    PinStyle = "Both",
    Count = 1,
    Value = true,
    UserPin = true
  })
  table.insert(ctrls, {
    Name = "Btn",
    ControlType = "Button",
    ButtonType = "Trigger",
    PinStyle = "Both",
    Count = 3,
    UserPin = true
  })
  return ctrls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  local CurrentPage = PageNames[props["page_index"].Value]
  local Colors = {
    Black     = {0,0,0}, --Black
    White     = {255,255,255}, --White
    Green     = {178,255,51}, --Shure Green
    Gray      = {105,105,105}, --Light Gray
    OffGray   = {124,124,124},
    BackGray = {102,102,102} --Normal Background Color
  }
  --local ContPins = "Unit Information~"
  if CurrentPage == "Control" then
    table.insert(graphics,{
      Type = "GroupBox",
      Text = "Screen Animation",
      --Color = Colors.White,
      Fill = Colors.BackGray,
      CornerRadius = 8,
      StrokeColor = Colors.White,
      StrokeWidth = 1,
      Position = {6,6},
      Size = {700,600},
      FontSize = 12,
      HTextAlign = "Left"
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "Screen Control",
      Position = {550,50},
      Color = Colors.White,
      Size = {120,20},
      FontSize = 12,
      HTextAlign = "Center"
    })
    table.insert(graphics,{
      Type = "GroupBox",
      Fill = Colors.White,
      CornerRadius = 8,
      StrokeColor = Colors.Black,
      StrokeWidth = 1,
      Position = {565,70},
      Size = {90,145},
      HTextAlign = "Center"
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "Raising/Dropping Time(sec)",
      Position = {530,250},
      Color = Colors.White,
      Size = {160,20},
      FontSize = 12,
      HTextAlign = "Center"
    })
    table.insert(graphics,{
      Type = "Text",
      Text = "Mask",
      Position = {550,320},
      Color = Colors.White,
      Size = {120,20},
      FontSize = 12,
      HTextAlign = "Center"
    })
  
    -- System
    local prettyname
    for i= 1, 3 do
      if i == 1 then prettyname = "UP"
      elseif i == 2 then prettyname = "STOP"
      elseif i == 3 then prettyname = "DOWN"
      end
      layout["Btn "..i] = {
        PrettyName = prettyname,
        Style = "Button",
        FontSize = 12,
        Color = Colors.White,
        OffColor = Colors.OffGray,
        UnlinkOffColor = true,
        CornerRadius = 5,
        Margin = 5,
        StrokeWidth = 1,
        Position = {585,90+35*(i-1)},
        Size = {50,35}
      }
    end
    layout["Duration"] = {
      PrettyName = "Motion Time",
      Style = "Text",
      FontSize = 12,
      Color = Colors.White,
      OffColor = Colors.OffGray,
      UnlinkOffColor = true,
      CornerRadius = 5,
      Margin = 5,
      StrokeWidth = 1,
      Position = {585,270},
      Size = {50,35}
    }
    layout["Mask"] = {
      PrettyName = "Mask ON/OFF",
      Style = "Button",
      ButtonStyle = "Toggle",
      FontSize = 12,
      Position = {585,340},
      Size = {50,35},
      Color = Colors.White,
      OffColor = Colors.OffGray,
      UnlinkOffColor = true,
      CornerRadius = 5,
      Margin = 5,
      StrokeWidth = 1
    }
    layout["Image"] = {
      PrettyName = "Image",
      Style = "Button",
      Color = Colors.Gray,
      OffColor = Colors.Gray,
      UnlinkOffColor = true,
      StrokeWidth = 1,
      Margin = 2,
      Position = {35,50},
      Size = {500,500}
    }
  end
  return layout, graphics
end

--Start event based logic
if Controls then
  --Debug Function
  ---------------------------------------------------------
  function DebugFormat(string) -- Format strings containing non-printable characters so we can see what they are
    local visual = ""
    for i=1,#string do
      local byte = string:sub(i,i)
      if string.byte(byte) >= 32 and string.byte(byte) <= 126 then
        visual = visual..byte
      else
        visual = visual..string.format("[%02xh]",string.byte(byte))
      end
    end
    return visual
  end
  
  DebugTx = false
  DebugRx = false
  DebugFunction = false
  DebugPrint = Properties["Debug Print"].Value
  
  -- A function to determine common print statement scenarios for troubleshooting
  function SetupDebugPrint()
    if DebugPrint=="Tx/Rx" then
      DebugTx,DebugRx=true,true
    elseif DebugPrint=="Tx" then
      DebugTx=true
    elseif DebugPrint=="Rx" then
      DebugRx=true
    elseif DebugPrint=="Function Calls" then
      DebugFunction=true
    elseif DebugPrint=="All" then
      DebugTx,DebugRx,DebugFunction=true,true,true
    end
  end
  
  SetupDebugPrint()
  
  ---------------------------------------------------------
  local rapidjson = require 'rapidjson'
  local EzSVG = require 'EzSVG'
  
  local docSize = 1000
  local center = docSize / 2
  local d = docSize --grid
  local stop_pos = d/2 - d/8 -- 3/8 of Campus
  
  local fillColor = "white"
  local strokeColor = "black"
  local strokeWidth = 1
  local fillOpacity = 1
  local btn = Controls["Btn"]
  
  local sec = 1/30 -- Change Point Frame Rate
  local duration = 5 -- motion time
  local step = stop_pos / (1/sec * duration)--10 d/100
  local amount = 0 -- 1 dot
  local maskfillColor = "black"
  local maskSwitch = Controls["Mask"]
  
  --Functions
  function DrawSVG(svgData)
    Controls.Image.Legend = rapidjson.encode({
    DrawChrome = false,
    IconData = Crypto.Base64Encode(svgData),
    })
  end
  
  function DrawScreen(doc, amount)
    local motor = EzSVG.Group()
    local fabric = EzSVG.Group()
    local batom = EzSVG.Group()
  
    local L = d/2 + (d/8*2) -- half + half/2
    local H = d/32
    local x = center - d/4 - d/8
    local y = center - d/4 - d/16 + d/128
  
    local s_motor = EzSVG.Rect(x, y, L, H, d/200, d/200)-- create a motor
      :setStyle("fill", fillColor)
      :setStyle("fill-opacity", fillOpacity)
      :setStyle("stroke", strokeColor)
      :setStyle("stroke-width", strokeWidth)
    motor:add(s_motor) -- add motor to group
  
    local mask = d/80 --mask width
  
    local f_L = d/2 + (d/16*2) + (2 * mask)
    local f_H = amount
    local f_x = center - d/4 - d/16 - mask
    local f_y = center - d/4 + mask - d/32 - (amount == d * 3/8 and 0 or mask )
    --print("f_y : "..f_y)
    local s_fabric = EzSVG.Rect(f_x, f_y, f_L, f_H)-- create a fabric
      :setStyle("fill", fillColor)--fillColor
      :setStyle("fill-opacity", fillOpacity)
      :setStyle("stroke", maskfillColor)
      :setStyle("stroke-width", mask)
    fabric:add(s_fabric) -- add fabric to group
  
    local b_L = L - d/32*2
    local b_H = amount
    local b_x = center - d/4 - d/8 + d/32
    local b_y = f_y + amount  - (amount == 0 and mask or 0)
    --print("b_y : "..b_y)
    local s_batom = EzSVG.Rect(b_x, b_y, b_L, d/64)-- create a batom
      :setStyle("fill", maskfillColor)
      :setStyle("fill-opacity", fillOpacity)
      :setStyle("stroke", strokeColor)
      :setStyle("stroke-width", strokeWidth)
    batom:add(s_batom) -- add batom to group
    local offset = 50
    motor :translate(0, offset) --x, y offset
    fabric:translate(0, offset)
    batom :translate(0, offset)
  
    doc:add(batom)
    doc:add(fabric)
    doc:add(motor)
  
  end
  
  --DrawCampus
  function DrawCampus()
    local doc = EzSVG.Document(docSize, docSize)
    DrawScreen(doc, amount)
    local svgData = doc:toString()
    DrawSVG(svgData)
  end
  
  --Timers
  upTimer = Timer.New()
  downTimer = Timer.New()
  
  upTimer.EventHandler = function()
    amount = (amount - step < 0 ) and 0 or amount - step
    DrawCampus()
    --print("UpTime amount:"..amount)
    if amount <= 0 then
      upTimer:Stop()
      print("UpTimerStop")
      amount = 0
    end
  end
  
  downTimer.EventHandler = function()
    amount = (amount + step > stop_pos) and stop_pos or amount + step
    DrawCampus()
    --print("Down Time amount:"..amount)
    if amount >= stop_pos then
      downTimer:Stop()
      print("DownTimerStop")
      amount = stop_pos--Stop Position 3/8 of Campas
    end
  end
  
  --EventHandlers
  btn[1].EventHandler = function()
    print("UpTimerStart")
    downTimer:Stop()
    upTimer:Start(sec)
  end
  
  btn[3].EventHandler = function()
    print("DownTimerStart")
    upTimer:Stop()
    downTimer:Start(sec)
  end
  
  btn[2].EventHandler = function()
    print("TimerStop")
    upTimer:Stop()
    downTimer:Stop()
  end
  
  maskSwitch.EventHandler = function()
    maskfillColor = maskSwitch.Boolean == true and "black" or "white"
    maskSwitch.Color = maskSwitch.Boolean == true and "Black" or "White"
    maskSwitch.Legend = maskSwitch.Boolean == true and "Black" or "White"
    DrawCampus()
  end
  
  Controls.Duration.EventHandler = function()
    duration = math.floor(Controls.Duration.Value * 10) / 10 --Rounded down to one decimal place
    Controls.Duration.Value = duration
    step = stop_pos / (1/sec * duration)
    DrawCampus()
  end
  
  --initialize
  btn[1].Legend = "\u{25B2}"--"▲"
  btn[2].Legend = "\u{25A0}"--"■"
  btn[3].Legend = "\u{25BC}"--"▼"
  maskSwitch.Color = "Black"
  maskSwitch.Legend ="Black"
  maskSwitch.Boolean=true
  
  DrawCampus()
end
